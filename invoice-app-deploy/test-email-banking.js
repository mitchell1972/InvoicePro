// Direct test of email service with banking details
const testBankingDetails = {
  country: 'GB',
  uk: {
    bankName: 'Barclays Bank',
    accountName: 'Freelancer Business Ltd',
    accountNumber: '12345678',
    sortCode: '123456'
  },
  us: {
    bankName: 'Bank of America',
    accountName: 'Freelancer Business LLC',
    accountNumber: '1234567890',
    routingNumber: '123456789'
  }
};

const testCompanyDetails = {
  name: 'Freelancer Business Ltd',
  address: '123 Business Street',
  city: 'London',
  postcode: 'SW1A 1AA',
  country: 'United Kingdom',
  vatNumber: 'GB123456789'
};

const testInvoice = {
  id: 'test-123',
  number: 'INV-001',
  issueDate: '2024-12-08',
  dueDate: '2025-01-07',
  client: {
    name: 'Test Client Ltd',
    email: 'client@example.com'
  },
  items: [
    {
      description: 'Web Development Services',
      qty: 1,
      unitPrice: 100000, // £1000.00 in pence
      taxPercent: 20
    }
  ],
  totals: {
    subtotal: 100000,
    tax: 20000,
    total: 120000
  },
  terms: 'Net 30',
  notes: 'Thank you for your business!'
};

// Test the email content generation
function generateInvoiceEmailContent(invoice, bankingDetails, companyDetails) {
  const paymentLink = `http://localhost:3000/pay/${invoice.id}`;
  const companyName = companyDetails?.name || 'Your Company';
  
  // Debug logging
  console.log('[EMAIL SERVICE] Banking details received:', JSON.stringify(bankingDetails, null, 2));
  
  let bankingSection = '';
  if (bankingDetails && bankingDetails.country) {
    if (bankingDetails.country === 'GB' && bankingDetails.uk && bankingDetails.uk.bankName && bankingDetails.uk.bankName.trim() !== '') {
      const uk = bankingDetails.uk;
      bankingSection = `
🏦 BANK TRANSFER (UK):
━━━━━━━━━━━━━━━━━━━━━━━━━━━
Bank Name: ${uk.bankName}
Account Name: ${uk.accountName}
Sort Code: ${uk.sortCode.replace(/(\d{2})(\d{2})(\d{2})/, '$1-$2-$3')}
Account Number: ${uk.accountNumber}

Please use invoice #${invoice.number} as your payment reference.
`;
    } else if (bankingDetails.country === 'US' && bankingDetails.us && bankingDetails.us.bankName && bankingDetails.us.bankName.trim() !== '') {
      const us = bankingDetails.us;
      bankingSection = `
🏦 BANK TRANSFER (US):
━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Bank Name: ${us.bankName}
Account Name: ${us.accountName}
Routing Number (ABA): ${us.routingNumber}
Account Number: ${us.accountNumber}

Please use invoice #${invoice.number} as your payment reference.
`;
    }
  }
  
  console.log('[EMAIL SERVICE] Banking section generated:', bankingSection ? 'YES' : 'NO');

  function formatCurrency(amount) {
    return new Intl.NumberFormat('en-GB', {
      style: 'currency',
      currency: 'GBP'
    }).format(amount / 100);
  }

  const itemsList = invoice.items.map(item => 
    `• ${item.description} - ${item.qty} x ${formatCurrency(item.unitPrice)} = ${formatCurrency(item.qty * item.unitPrice * (1 + item.taxPercent / 100))}`
  ).join('\n');

  return `Subject: Invoice #${invoice.number} - ${formatCurrency(invoice.totals.total)} - ${companyName}

Dear ${invoice.client.name},

Thank you for your business! Please find your invoice details below:

📋 INVOICE DETAILS:
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Invoice Number: #${invoice.number}
Issue Date: ${new Date(invoice.issueDate).toLocaleDateString()}
Due Date: ${new Date(invoice.dueDate).toLocaleDateString()}
From: ${companyName}
${companyDetails?.address ? `Address: ${companyDetails.address}, ${companyDetails.city || ''} ${companyDetails.postcode || ''}` : ''}

📦 ITEMS & SERVICES:
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
${itemsList}

💰 SUMMARY:
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Subtotal: ${formatCurrency(invoice.totals.subtotal)}
Tax: ${formatCurrency(invoice.totals.tax)}
────────────────────────────────────────────────────
TOTAL DUE: ${formatCurrency(invoice.totals.total)}

💳 PAYMENT OPTIONS:
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🌐 Pay Online (Credit/Debit Card): ${paymentLink}
${bankingSection}
${invoice.notes ? `📝 NOTES:\n${invoice.notes}\n\n` : ''}⏰ Payment Terms: ${invoice.terms || 'Net 30'}

Questions about this invoice? Reply to this email or contact us directly.

Best regards,
${companyName}

---
This invoice was generated by your automated invoice system.`;
}

// Run the test
console.log('='.repeat(80));
console.log('TESTING BANKING DETAILS IN EMAIL CONTENT');
console.log('='.repeat(80));

const emailContent = generateInvoiceEmailContent(testInvoice, testBankingDetails, testCompanyDetails);

console.log('\n' + '='.repeat(80));
console.log('GENERATED EMAIL CONTENT:');
console.log('='.repeat(80));
console.log(emailContent);

console.log('\n' + '='.repeat(80));
console.log('TEST RESULTS:');
console.log('='.repeat(80));

// Check if banking details are included
const hasBankingDetails = emailContent.includes('🏦 BANK TRANSFER');
const hasBarclaysBank = emailContent.includes('Barclays Bank');
const hasSortCode = emailContent.includes('12-34-56');
const hasAccountNumber = emailContent.includes('12345678');

console.log(`✅ Banking section included: ${hasBankingDetails ? 'YES' : 'NO'}`);
console.log(`✅ Bank name included: ${hasBarclaysBank ? 'YES' : 'NO'}`);
console.log(`✅ Sort code formatted: ${hasSortCode ? 'YES' : 'NO'}`);
console.log(`✅ Account number included: ${hasAccountNumber ? 'YES' : 'NO'}`);

if (hasBankingDetails && hasBarclaysBank && hasSortCode && hasAccountNumber) {
  console.log('\n🎉 SUCCESS: Banking details are properly included in the email!');
} else {
  console.log('\n❌ FAILURE: Banking details are missing or incomplete in the email.');
}

console.log('\n' + '='.repeat(80));
